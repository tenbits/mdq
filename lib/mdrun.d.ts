// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../appcfg

declare module 'mdrun' {
    export { Runner } from 'mdrun/Runner';
}

declare module 'mdrun/Runner' {
    import { IBlock } from 'mdrun/interfaces/IBlock';
    import AppCfg from 'appcfg';
    import { IRunnerCtx } from 'mdrun/runners/IRunner';
    export class Runner {
        ctx: IRunnerCtx;
        config(): Promise<AppCfg<any> & {
            [key: string]: any;
        }>;
        runFromCli(): Promise<void>;
        executeFile(path: string, opts?: {
            onLog: any;
            sections?: string[];
        }): Promise<any[]>;
        executeBlocks(blocks: IBlock[], opts?: {
            onLog: any;
        }): Promise<any[]>;
    }
}

declare module 'mdrun/interfaces/IBlock' {
    import { TBlockType } from 'mdrun/interfaces/TBlockType';
    export interface IBlock {
        type: TBlockType;
        content: string;
    }
    export interface ICodeBlock extends IBlock {
        type: 'code';
        lang: string;
    }
}

declare module 'mdrun/runners/IRunner' {
    import { TCodeType } from 'mdrun/interfaces/TCodeType';
    export type TRunData = {
        content: string;
        env: Record<string, any>;
        ctx: IRunnerCtx;
        config: any;
    };
    export interface IRunner {
        type: TCodeType;
        extensions: string[];
        preRun(data: TRunData): Promise<string>;
        run(data: TRunData, opts?: {
            onLog: any;
        }): Promise<any>;
        postRun(result: any, logs: any, data: TRunData): Promise<any>;
    }
    export interface IRunnerCtx {
        filename?: string;
    }
}

declare module 'mdrun/interfaces/TBlockType' {
    export type TBlockType = 'text' | 'h1' | 'code';
}

declare module 'mdrun/interfaces/TCodeType' {
    export type TCodeType = 'json' | 'script' | 'shell';
}

